Ready, Set, Go!
An introduction to golang
9 May 2017
Tags: intro, golang, concurrency

Cody Oss
Software Engineer, SPS Commerce
closs@spscommerce.com
@imossome

* Who am I?

.image images/gopher-cody.png 500 _

* What is Go?

- A programing language made by three greats: Robert Griesemer, Rob Pike(Plan 9 and UTF-8), and Ken Thompson(UNIX, B, and UTF-8)
- Concurrent, Garbage Collected, and fast Compilations

.image images/gopher.png 300 _


* Why Go?

- Version 1 compatibility promise
- Fast with a small footprint
- Wicked fast compile times (and test times!)
- Fast to learn
- Concurrency (Get to this later)
.image images/logos.png 300 _


* Core Concepts

- *Cross* *Compiling* *Binaries*
- *Great* *tooling*
- Compiled
- Statically typed
- Clean syntax
- Concurrency primitives
- Open Source
- Garbage Collected

* Hello world

.play code/hello-world.go

* Keywords

.code code/keywords.example
Number of keywords
- C++: 92
- Java : 53!
- Python: 33!!
- Go: *25!!!!!!*

* Structs

- Go does has not have classes; it uses structs
- There is no inheritance hierarchy in Go
- First letter of identifier matters!
- Methods "attach" to structs( the combination is sort of like a class)
- Can have value or pointer receivers
.code code/structs.example /START OMIT/,/END OMIT/

* Methods & Interfaces

.play code/methods-interfaces.go /START OMIT/,/END OMIT/

* Real Meeko

.image images/meeko.jpg 500 _

* Errors

- Go *DOES* *NOT* have Exceptions
- The key to Go's errors is that they are not special; They are just values
.code code/errors.example

* Concurrency

- Go supports "green-like" threads which are multiplexed by the runtime over an internal thread pool
- Concurrency is *NOT* parallelism
- Concurrency: "the composition of independently executing processes" (dealing with lots at once)
- Parallelism: "simultaneous execution of computations" (doing lots at once)
- Concurrency enables parallelism
- Rob Pike says it better that I: [[https://www.youtube.com/watch?v=cN_DpYBzKso][Watch it HERE!]] or [[https://talks.golang.org/2012/waza.slide#1][View the deck HERE!]]

* Goroutines

- Simply putting the word `go` in front of a `func` starts it in a new "thread"
.play -edit code/goroutines.go /START OMIT/,/END OMIT/

* Channels

- "Do not communicate by sharing memory; instead, share memory by communicating."
- "If the channel is unbuffered, the sender blocks until the receiver has received the value"
.play code/channel1.go /START OMIT/,/END OMIT/

* Buffered Channels
- "If the channel has a buffer, the sender blocks only until the value has been copied to the buffer; if the buffer is full, this means waiting until some receiver has retrieved a value."
.play -edit code/channel2.go /START OMIT/,/END OMIT/

- Buffered channels can be used very effectively to pipeline data between work pools of goroutines operating on channels.

* Synchronize via Channels

- Because we now know channels are blocking we can use them to synchronize goroutines
.play code/channel3.go /START OMIT/,/END OMIT/

* Select

- Selects are used to multiplex reading from multiple channels at once
- If multiple channels are ready one is randomly selected
.play code/select.go /START OMIT/,/END OMIT/

* Shortcomings?

- Generics 
- Dependency Management(WIP [[https://github.com/golang/dep][dep]])
- Supports ideas like `map` and `filter`, but they are not built into the language

* Call to Action

- Go has a small concise standard lib
- Readable 
- Fast to pick up
- Fast builds 
- Fast processing with concurrency

Have a rewrite or a green-field app coming up? *Consider* *Go!*

* How can I learn more?

.link https://golang.org/dl/ Installing Go
.link https://tour.golang.org Tour of Go
.link https://golang.org/doc/effective_go.html Effective Go
.link https://www.meetup.com/Minneapolis-Ultimate-Golang/ Minneapolis Go Meetup
.link https://gobyexample.com/ Go by Example
.link https://gowebexamples.github.io/ Go Web by Example
.link https://thenewstack.io/make-a-restful-json-api-go/ REST API Example
.link https://gopherize.me/gopher/f6e6bff2bf4b5cbcadb4a4bb72020db118a9d9f3 My Gopher
.link https://gopherize.me/ Make Yours!

* Refs

- golang.org
- github.com/corylanou/go-1-hour-boot-camp
- clipartpanda.com
- halyph.com/blog/2016/11/28/prog-lang-reserved-words.html
- gobyexample.com
- blog.golang.org/concurrency-is-not-parallelism

* Questions?

Thank you!
.image images/questions.jpg 400 _
